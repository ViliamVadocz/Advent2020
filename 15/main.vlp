input := [9,6,0,10,18,2,1]

int_to_str := $int_to_str
print := (n) { $$stdio\puts(&int_to_str(n)) }

# part 1
last_seen := (last_seen, index) {
    index = |input| - 1 -> last_seen
    last_seen[input[index]] := index
    @(last_seen, index + 1)
} ([-1; 20000], 0)

(last_seen, turn, prev) {
    # _ := print(prev)
    _ := { prev > |last_seen| -> print(prev); 0}
    # part 1
    turn = 2019 -> prev
    # see what is the last time we have seen this number
    t := last_seen[prev]
    # based on when we saw it last, we find the next
    next := { t = -1 -> 0; turn - t }
    # replace it with current turn
    last_seen[prev] := turn
    @(last_seen, turn + 1, next)
} (last_seen, |input| - 1, input[|input| - 1])

# part 2
# search := (elem: elem, in: arr) {
#     (index) {
#         index = |arr| -> -1
#         arr[index] = elem -> index
#         arr[index] = -1 -> -1 # early exit because we reached end
#         @(index + 1)
#     } (0)
# }

# numbers, turns := (numbers, turns, index) {
#     index = |input| - 1 -> numbers, turns
#     numbers[index] := input[index]
#     turns[index] := index
#     @(numbers, turns, index + 1)
# } ([-1; 2000], [-1; 2000], 0)

# (numbers, turns, len, turn, prev) {
#     _ := print(prev)
#     turn = 30000000 - 1 -> asnwer: prev, array_len_used: len
#     index := search(elem: prev, in: numbers)
#     # new num
#     index = -1 -> {
#         numbers[len] := prev
#         turns[len] := turn
#         @(numbers, turns, len + 1, turn + 1, 0)
#     }
#     # already in arrays\
#     t := turns[index]
#     turns[index] := turn
#     @(numbers, turns, len, turn + 1, turn - t)
# } (numbers, turns, |input| - 1, |input| - 1, input[|input| - 1])
