# bools
T := 1 > 0
F := !T

# import
parse_int, int_to_char := $parse
machine := $part1
# machine := $part2

# wrapper funcs
eof := (file) { $$stdio\feof(file) != 0 }
get_char := (file) { int_to_char($$stdio\fgetc(file)) }

# machine constructor
new_machine := (mask: inital_mask) {
    # 
    machine ((
        cells: [0; 500],
        positions: [0; 500],
        filled_amount: 0,
        mask: inital_mask
    ))
}

# parsing input
parse_mask := (file) {
    (index, set, values) {
        char := get_char(file)
        char = '\n' || eof(file) -> set: set, values: values
        char = 'X' -> @(index + 1, set, values)
        char = '0' -> {
            set[index] := T
            @(index + 1, set, values)
        }
        char = '1' -> {
            set[index] := T
            values[index] := T
            @(index + 1, set, values)
        }
        # ignore non X,0,1 chars
        @(index, set, values)
    } (0, [F; 36], [F; 36])
}

step := (machine, file) {
    is_mask := (index) {
        index = 4 || (get_char(file) = "mask"[index]) && @(index + 1)
    } (0)
    is_mask -> {
        mask := parse_mask(file)
        done: eof(file), machine: machine.mask_instruction(mask: mask)
    }

    # otherwise it's a mem[NUM] = NUM instruction
    # skip until we're at '['
    _ := () { get_char(file) = '[' -> {}; @() } ()

    # read and parse the number ending at ']'
    pos := (index, buffer) {
        char := get_char(file)
        char = ']' -> parse_int(buffer, index)
        buffer[index] := char
        @(index + 1, buffer)
    } (0, ['\x00'; 16])

    # skip until we get the next num
    num_buffer := ['\x00'; 16]
    num_buffer[0] := () { char := get_char(file); '0' <= char <= '9' -> char; @() } ()
    num := (index, buffer) {
        char := get_char(file)
        char = '\n' || eof(file) -> parse_int(buffer, index)
        buffer[index] := char
        @(index + 1, buffer)
    } (1, num_buffer)

    done: eof(file), machine: machine.mem_instruction(position: pos, cell: num)
}

# main
file := $$stdio\fopen(&"input.txt\0", &"r\0")
sum := (machine) {
    done: done, machine: machine := step(machine, file)
    done -> machine.sum()
    @(machine)
} (new_machine(mask: parse_mask(file)))
_ := $$stdio\fclose(file)
sum
